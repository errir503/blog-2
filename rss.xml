<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Diel Duarte blog]]></title><description><![CDATA[Diel Duarte personal blog]]></description><link>https://dielduarte.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 23 Apr 2020 05:13:45 GMT</lastBuildDate><item><title><![CDATA[Tips for remote teams]]></title><description><![CDATA[This is a post about async communication, tools, and tips to keep a remote team based on my experiêncie and studies. We’re not talking about…]]></description><link>https://dielduarte.github.io/en/tips-for-remote-teams/</link><guid isPermaLink="false">https://dielduarte.github.io/en/tips-for-remote-teams/</guid><pubDate>Sun, 19 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a post about async communication, tools, and tips to keep a remote team based on my experiêncie and studies. We’re not talking about a precise science, that said, I highly recommend to test the tips for some weeks and analyze the results with the help of the team feedback.&lt;/p&gt;
&lt;h2 class=&quot;subtitle--separator&quot;&gt;Async vs realtime&lt;/h2&gt;
&lt;p&gt;Try to keep the communication as much async as possible, assimilate that real-time chats are the same as meetings can help. Can you think about spending 8 hours a day in a meeting? In a real situation of extreme remote disorganization it can happen, as a result, the team productivity decreases.&lt;/p&gt;
&lt;p&gt;Avoid using real-time tools, instead, try tools like &lt;a href=&quot;https://twist.com&quot;&gt;Twist&lt;/a&gt; that basically organizes all the team communication by threads.&lt;/p&gt;
&lt;p&gt;Like every developer teams have the culture to spend some time of the day doing code review, it will be necessary to implement the same culture to spend some time of the day checking all threads that they are participating and answer them/take actions if needed.&lt;/p&gt;
&lt;p&gt;Use real-time tools in emergency situations like a bug in production, topics that really requires an answer in real time or day to day situations like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hey, can you help me to find that document X? I can’t find!&lt;/li&gt;
&lt;li&gt;I’ve a problem that I can’t fix, someone free to a pair programming?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and of course, informal conversations in groups or private.&lt;/p&gt;
&lt;h3&gt;One Monday&lt;/h3&gt;
&lt;p&gt;One Monday is a valid concept especially for teams in multiple timezones. The concept means that in an async communication I’m supposed to know that an answer can delay till 24 hours depending on the timezone of the rest of the team and company. I highly recommend that in emergency situations use real-time chats or video calls.&lt;/p&gt;
&lt;h2&gt;Talk with the right people&lt;/h2&gt;
&lt;p&gt;if you need to talk about marketing, send the message in the marketing group, start threads with only the right people related to the marketing topic or related to the topic that you want to discuss. In this way we avoid unnecessary distractions to the rest of the team.&lt;/p&gt;
&lt;p&gt;Receiving notifications about everything all the time, besides being an unnecessary distraction, forces people to mute the communication channel or start ignoring it in order to be able to focus at the work, as a result, a bigger communication gap&lt;/p&gt;
&lt;h2&gt;Add groups by team and knowledge areas&lt;/h2&gt;
&lt;p&gt;Avoid creating groups to each topic or each task that needs to be discussed, in a matter of days this might turn in a big problem and nobody will know in which group answer, again increasing the communication gap.&lt;/p&gt;
&lt;p&gt;Group examples by teams:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;team dashboard&lt;/li&gt;
&lt;li&gt;team website&lt;/li&gt;
&lt;li&gt;Team marketing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Group examples by knowledge areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Front-end&lt;/li&gt;
&lt;li&gt;Back-end&lt;/li&gt;
&lt;li&gt;Designers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use groups by knowledge areas to increase engagement and knowledge sharing. It makes much more sense a front-end ask some questions about CSS in a group focused in front-end instead of asking in a general chat with everyone of the company or even in a group focused in the back-end.&lt;/p&gt;
&lt;h2&gt;Status&lt;/h2&gt;
&lt;p&gt;A good way to know if someone is online or not is using chat status. Some tools, like Slack, enable the users to add more status besides only online/offline. A nice idea that my current team use and it is working well are the statuses:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/status-1.png&quot; alt=&quot;imagem mostrando status pré definidos além de online ou offline&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can see the status next to the user name:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/status-2.png&quot; alt=&quot;imagem mostrando status ao lado do nome do usário&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/status-3.png&quot; alt=&quot;imagem mostrando status ao lado do nome do usário em uma conversa real&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the example above, I know that the user Magdiel Duarte is offline, it means that even though I send a message to him the answers won’t be instantaneous and that’s okay! send the message in the same way and wait. If you really need an instantaneously answer always send in groups where more people can help.&lt;/p&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;Always uses video calls with video enabled, it increases the team engagement, makes people feel more comfortable with that moment and keep them focused.&lt;/p&gt;
&lt;h3&gt;C-Levels meetings&lt;/h3&gt;
&lt;p&gt;One of the techniques listed in the book “It doesn’t have to be crazy at work” is a concept that 1 or 2 weekdays the C-levels are free for some hours to make meetings with anyone in the company, the time slots are somehow public to everyone, using google calendar for example. outside these time slots, meetings with C-levels are restricted to only urgent topics.&lt;/p&gt;
&lt;p&gt;Do you remember about chats in real-time being considered meetings? Just imagine a day to day of a C-level answering people questions all the time, they wouldn’t be able to work besides answering questions.&lt;/p&gt;
&lt;h3&gt;Daily Reports&lt;/h3&gt;
&lt;p&gt;Daily reports might be done either by video calls with video enabled or via text.&lt;/p&gt;
&lt;p&gt;In a distribuited team in multiple timezones text is a good option. Tools like &lt;a href=&quot;https://statushero.com/&quot;&gt;Status Hero&lt;/a&gt; help people to not forget to send the reports, save all daily reports in a nice dashboard and bring some interesting insights like general productivity by day.&lt;/p&gt;
&lt;p&gt;Choosing Daily reports via video calls might increase the engagement, especially if the day to day doesn’t have a lot of meetings.&lt;/p&gt;
&lt;p&gt;In this case, I highly recommend testing the two ways and ask people feedback to choose one.&lt;/p&gt;
&lt;h2&gt;TIL - Today I learned&lt;/h2&gt;
&lt;p&gt;One of the main concerns, when people start working remotely, is the lack of knowledge sharing. Today I learned is a channel where people share knowledge whenever they think is worth it to share, not necessarily regards the company context and not necessarily every day.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;One of the main concerns as well is about visibility when people start working remotely. Thanks is a channel where people can publically say thanks to a coworker about something he or she has done to help in any situation. Here’s a good way to learn about someone’s soft skills remotely, build an environment where people are grateful of each other, increasing team engagement.&lt;/p&gt;
&lt;h2&gt;Hero&lt;/h2&gt;
&lt;p&gt;Hero is a valid concept if the team needs to work with either external or internal support. The concept
means that by each time period determined by the team one person is the &lt;strong&gt;hero,&lt;/strong&gt; this person is responsable to talk directly with the support team, analyze and organize backlog tasks related and work to solve the problems.&lt;/p&gt;
&lt;p&gt;With one person focused on it, the rest of the team can focus to work in new features or big refactors without interruptions to help the support team. It is used to better organize the team time between deep and shalow work, two other important concepts to study.&lt;/p&gt;
&lt;p&gt;One of my references about remote work and deep work is the Doist company, where they apply these concepts. They have a nice blog and I highly recomend two posts about Deep Work and Hero + House Keeping.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/heroes-housekeeping-days/&quot;&gt;https://doist.com/blog/heroes-housekeeping-days/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/deep-work/?utm_source=doist_blog&amp;#x26;utm_medium=referral&amp;#x26;utm_campaign=heroes_housekeeping_days&quot;&gt;https://doist.com/blog/deep-work&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Calendar&lt;/h2&gt;
&lt;p&gt;One of the best ways to get a big picture of everything that is happening at the company is using the calendar.&lt;/p&gt;
&lt;p&gt;I especially recommend google calendar, with google calendar it is possible to share everyone’s calendars with everyone and in an easy way people can send you an invite to a meeting just looking at the free spots, without need to ask you. A good thing to do is to add at the calendar especially when you a not available, some companies ask you to even add personal things if it is during your “work hours”. e.g:&lt;/p&gt;
&lt;p&gt;John goes to the gym every day at 2 pm, so he can add it to the calendar to let people know that he isn’t available between 2 pm - and 3 pm. If John doesn’t feel comfortable to add “going to the gym” at the event description, he can put just “occupied”.&lt;/p&gt;
&lt;h2&gt;Micro-managment&lt;/h2&gt;
&lt;p&gt;Be careful with people micro-management, if you need to ask someone what they are working on, for sure we have a communication problem. The best scenario is to use one task management software or even excel sheets - what’s making more sense for you - where each people can do one task at a time with clear status and within public access for everyone to.&lt;/p&gt;
&lt;h2&gt;FOMO - fear of missing out&lt;/h2&gt;
&lt;p&gt;This is a personal issue, that can happen or not depends on the person. But the company culture can help to decrease the cases to zero. The company can create a rule of 8 hours a day working and nothing more with only exceptions in urgent cases is a great start!&lt;/p&gt;
&lt;p&gt;A culture where people are online 24 hours per day, work even at the weekends cannot be viewed as a good thing by the company and the team leaders. This brings people to a high risk of burnout which is a serious problem, and to the company represents a hight decrease in productivity in the medium and long term.&lt;/p&gt;
&lt;p&gt;To the team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep a routine, it is super important working remotely&lt;/li&gt;
&lt;li&gt;If possible, do not download the company chat on your personal mobile phone.&lt;/li&gt;
&lt;li&gt;configure to receive notifications only in your work hours&lt;/li&gt;
&lt;li&gt;keep in mind that work is a continuous process, you can continue tomorrow!&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Dicas para times remotos]]></title><description><![CDATA[Esse é um material sobre comunicação assíncrona, algumas ferramentas e dicas para manter uma equipe remota baseado em minha experiência e…]]></description><link>https://dielduarte.github.io/pt-br/dicas-para-times-remotos/</link><guid isPermaLink="false">https://dielduarte.github.io/pt-br/dicas-para-times-remotos/</guid><pubDate>Sun, 19 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Esse é um material sobre comunicação assíncrona, algumas ferramentas e dicas para manter uma equipe remota baseado em minha experiência e estudos. Não estamos falando de uma ciência exata e recomendo testar as dicas por algumas semanas e avaliar os resultados com a ajuda de feedbacks da equipe. &lt;/p&gt;
&lt;h2 class=&quot;subtitle--separator&quot;&gt;Async vs realtime&lt;/h2&gt;
&lt;p&gt;Tente manter a comunicação assíncrona sempre que possível, assimilar que conversas em real time são como reuniões pode ajudar. Já pensou ficar em reunião 8 horas por dia? Em uma situação de extrema desorganização remota isso pode acontecer, como resultado, a produtividade do time cai.&lt;/p&gt;
&lt;p&gt;Evitar usar ferramentas de chat em tempo real pode ajudar. No lugar tente ferramentas como Twist  que basicamente organiza toda a comunicação do time por thread. &lt;/p&gt;
&lt;p&gt;Assim como todo time de desenvolvimento tem um cultura de fazer code review em alguns momentos do dia, também será necessário implantar a mesma ideia para que a equipe dedique um tempo do dia para checar todas as threads em que eles estão participando e responder/tomar ações se necessário.&lt;/p&gt;
&lt;p&gt;Use chats em tempo real para situações de emergência como um bug em produção, assuntos que realmente precisam de uma resposta em tempo real / situações do dia a dia como:	&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ei, não consigo achar onde esta documento X, pode me ajudar?&lt;/li&gt;
&lt;li&gt;Estou com um problema que não consigo resolver, alguém livre para fazer um pair programming?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E claro, para conversas informais em grupos ou privadas&lt;/p&gt;
&lt;h3&gt;One Monday&lt;/h3&gt;
&lt;p&gt;One monday é um conceito válido principalmente para times em múltiplos timezones. O conceito consiste em entender que em uma comunicação assíncrona em um ambiente remoto estarei sujeito a ter que esperar até 24 horas para receber uma resposta dependendo do timezone das pessoas envolvidas. Reafirmo a dica, em casos de situações urgentes usem chats em tempo real ou ligações para parear com webcam ligada.&lt;/p&gt;
&lt;h2&gt;Converse com as pessoas certas&lt;/h2&gt;
&lt;p&gt;Se você precisa discutir algo sobre marketing, envie no grupo de marketing, crie thread apenas com as pessoas relacionadas a marketing ou relacionadas ao assunto que você precisa resolver/discutir, dessa forma evitamos distrações desnecessárias para o resto do time.&lt;/p&gt;
&lt;p&gt;Receber notificações ou participar de todas as threads a todo momento sobre assuntos que o integrante do time não precisa participar, além de ser uma distração desnecessária, muitas vezes força os integrantes a mutar ou ignorar o canal de comunicação para que consigam focar no trabalho e como resultado, um gap de comunicação muito maior&lt;/p&gt;
&lt;h2&gt;Crie grupos por time e/ou áreas de conhecimento&lt;/h2&gt;
&lt;p&gt;Evite criar grupos para cada assunto ou cada tarefa que precisa ser discutida, em questão de dias isso pode virar um caos e ninguém sabe em que grupo responder, mais uma vez aumentando o gap de comunicação. &lt;/p&gt;
&lt;p&gt;Exemplo de grupos por time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;time dashboard&lt;/li&gt;
&lt;li&gt;time site&lt;/li&gt;
&lt;li&gt;RH&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemplo de grupos por áreas de conhecimento:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Front-end&lt;/li&gt;
&lt;li&gt;Back-end&lt;/li&gt;
&lt;li&gt;Designers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use grupos por áreas de conhecimento para aumentar o engajamento e a troca de conhecimento ou ajudas rápidas. Faz muito mais sentido um front-end perguntar uma dúvida ou dicas de CSS em um grupo focado sobre front-end ao invés de perguntar no chat geral da empresa, para apenas uma pessoa ou mesmo no grupo de back-end.&lt;/p&gt;
&lt;h2&gt;Status&lt;/h2&gt;
&lt;p&gt;Uma ótima maneira saudável de saber quando alguém está online ou não é usando o próprio status de chats em real time. Algumas ferramentas, como Slack, permitem aos usuários adicionarem status diferentes de apenas online/offline. Uma ideia que meu time atual aplica e tem funcionado muito bem são os status:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/status-1.png&quot; alt=&quot;imagem mostrando status pré definidos além de online ou offline&quot;&gt;&lt;/p&gt;
&lt;p&gt;O status é exibido ao lado do nome do usuário:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/status-2.png&quot; alt=&quot;imagem mostrando status ao lado do nome do usário&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/status-3.png&quot; alt=&quot;imagem mostrando status ao lado do nome do usário em uma conversa real&quot;&gt;&lt;/p&gt;
&lt;p&gt;No exemplo acima, eu sei que o usuário Magdiel Duarte está offline no momento, isso quer dizer que, mesmo ao enviar uma mensagem direta para ele a resposta não vai ser instantânea, e tudo bem, mande a mensagem da mesma forma e espere. Se precisar realmente de uma resposta urgente sempre mande em grupos onde mais pessoas podem ajudar.&lt;/p&gt;
&lt;h2&gt;Reuniões&lt;/h2&gt;
&lt;p&gt;Sempre faça reuniões com a webcam ligada, isso gera um engajamento maior na equipe, faz as pessoas se sentirem confortáveis com aquele momento e manterem o foco.&lt;/p&gt;
&lt;h3&gt;C-Levels meetings&lt;/h3&gt;
&lt;p&gt;Uma das técnicas apresentadas pelo livro “It doesn’t have to be crazy at work” é um conceito onde, 1 ou 2 dias na semana os C-levels ficam por algumas horas disponíveis para reuniões com qualquer pessoa/time da empresa, os horários ficam públicos no calendário e qualquer time/pessoa pode marcar uma reunião nesse horário para disctuir sobre algum assunto. Fora desse horário fica restrigindo apenas para assuntos urgentes.&lt;/p&gt;
&lt;p&gt;Tive a oportunidade de trabalhar em uma empresa anterior a atual, onde aplicavam esse conceito e era muito bacana pois os C-levels dessa empresa participavam muito de todas as decisões. Lembra do conceito sobre chat em real time ser considerado reunião? Imagine o dia-a-dia de um C-level tendo que responder a todo momento dúvidas via chat, eles simplesmente não vão conseguir produzir nada além de responder o chat.&lt;/p&gt;
&lt;h3&gt;Daily Reports&lt;/h3&gt;
&lt;p&gt;Daily reports podem ser feitas por calls com a webcam ligada ou via texto. &lt;/p&gt;
&lt;p&gt;Em um time distribuído em múltiplos timezones texto acaba sendo uma boa opção. Ferramentas como o &lt;a href=&quot;https://statushero.com/&quot;&gt;Status Hero&lt;/a&gt;  ajudam as pessoas a não esquecerem de mandarem os reports e automatiza esse processo, além de trazer alguns insights como produtividade geral da equipe e deixar todas as Dailys Reports documentadas em um dashboard bem interessantes.&lt;/p&gt;
&lt;p&gt;Optar por Dailys Reports via calls pode trazer ainda mais engajamento, principalmente se o dia a dia do time não envolve em ter muitas reuniões. &lt;/p&gt;
&lt;p&gt;Nesse caso realmente vai depender de qual opção vai deixar o time mais confortável, recomendo testar as duas formas.&lt;/p&gt;
&lt;h2&gt;TIL - Today I learned&lt;/h2&gt;
&lt;p&gt;Uma das maiores reclamações quando se migra para um regime remoto é a troca de conhecimento, o &lt;strong&gt;Today I learned&lt;/strong&gt; é um canal onde as pessoas da empresas compartilham conhecimento, algum post bacana sobre uma tecnologia nova, uma técnica que pode ajudar em algum momento, um vídeo sobre uma palestra interessante. Literalmente qualquer coisa que o integrante da empresa achar que vale a pena ser compartilhado com os colegas.&lt;/p&gt;
&lt;p&gt;Apesar do nome ser &lt;strong&gt;Today I learned&lt;/strong&gt;, não é necessariamente obrigatório postar algo novo todos os dias, mas sim, quando achar que vale a pena ser compartilhado.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Uma das maiores preocupações pessoais quando uma pessoa migra para um trabalho remoto é sobre visibilidade, afinal, no regime remoto é muito díficil ter alguém observando como você se comporta no trabalho além das suas entregas. É válido lembrar que o trabalho de uma pessoa e o quão importante ela é para a empresa vai muito além de apenas entregas relacionadas diretamente ao seu cargo, aqui pode ser o lugar perfeito para aprender mais sobre as soft skills de uma pessoa de forma remota.&lt;/p&gt;
&lt;p&gt;O canal &lt;strong&gt;Thanks,&lt;/strong&gt; é um conceito que algumas empresas aplicam onde as pessoas agradecem umas as outras publicamente por algum feito que um colega fez e a ajudou no seu trabalho. Dessa forma fica registrado de forma pública ações que as vezes fica muito díficil observar remotamente, como ajudar um colega com um bug de forma privada, ensinar algo novo, e várias outras coisas.&lt;/p&gt;
&lt;p&gt;Além de criar um ambiente muito bom para se trabalhar onde as pessoas são gratas umas as outras, aumentanto ainda mais o engajamento do todo como um time.&lt;/p&gt;
&lt;h2&gt;Hero&lt;/h2&gt;
&lt;p&gt;Hero é um conceito válido se o time precisa prestar suporte, seja interno ou externo. O conceito consiste em a cada período de tempo determinado pela equipe uma pessoa é o &lt;strong&gt;hero,&lt;/strong&gt; essa pessoa é responsável por conversar diretamenta com o time de suporte, analizar e organizar tarefas relacionadas no backlog e trabalhar para resolver os problemas.&lt;/p&gt;
&lt;p&gt;Com uma pessoa focada nisso, o resto do time pode focar em trabalhar em novas features ou grandes refactors sem interrupções para prestar suporte. Isso é usado para organizar melhor o tempo da equipe entre Deep e Shalow Work outros conceitos bem importantes de se estudar.&lt;/p&gt;
&lt;p&gt;Uma das minhas referências em trabalho remoto e Deep Work é a empresa Doist onde aplicam esses conceitos. Eles tem um blog muito bom e super recomendo a leitura principalmente dos posts sobre Deep Work e Hero + House Keeping.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/deep-work/?utm_source=doist_blog&amp;#x26;utm_medium=referral&amp;#x26;utm_campaign=heroes_housekeeping_days&quot;&gt;https://doist.com/blog/deep-work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/heroes-housekeeping-days/&quot;&gt;https://doist.com/blog/heroes-housekeeping-days/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Calendário&lt;/h2&gt;
&lt;p&gt;Uma das melhores formas de se ter uma big picture sobre tudo que está acontecendo na empresa é usando o calendário. &lt;/p&gt;
&lt;p&gt;Especialmente recomendo o Google Calendar, nele é possível fazer com que todo mundo tenha acesso ao calendário de todos e que de forma fácil consiga mandar convites para reuniões, por exemplo sem ter que previamente perguntar para todo mundo qual o melhor horário. Algumas empresas pedem para o time colocarem no calendário principalmente quando não estão disponíveis, por exemplo:&lt;/p&gt;
&lt;p&gt;Maria sempre vai a academia as 2 pm, ela pode então nesse caso adicionar no calendário um evento dizendo que não está disponível no horário de 2 pm - 3 pm todos os dias, ficando ao critério da Maria colocar o porque caso se sinta a vontade para ou apenas “Ocupado”.&lt;/p&gt;
&lt;h2&gt;Micro-managment&lt;/h2&gt;
&lt;p&gt;Muito cuidado com micro gerenciamento de pessoas, se você precisa perguntar há uma pessoa o que ela está trabalhando temos com certeza algum gap de comunicação acontecendo. O ideal é usar algum software de gerenciamento de tarefas ou até mesmo planilhas (o que o time achar melhor). Onde cada pessoa pode estar fazendo apenas uma tarefa por vez, que fique claro qual o status atual e de forma pública para todos do time.&lt;/p&gt;
&lt;h2&gt;FOMO - medo de estar perdendo algo&lt;/h2&gt;
&lt;p&gt;Esse é um problema pessoal, que pode acontecer ou não e varia muito de pessoa para pessoa. Mas a postura da empresa relacionada a isso pode ajudar a diminuir os casos a 0. Ser firme com 8 horas trabalhadas por dia e nada mais - com excessão a casos urgentes - é um ótimo começo! &lt;/p&gt;
&lt;p&gt;Um cultura onde pessoas da equipe ficam online 24 horas por dia, trabalham até nos finais de semana não pode nunca ser visto com bons olhos pela empresa e pelos líderes das equipes, isso leva a um alto risco de burnout que é um problema sério de saúde, e para empresa representa uma queda brusca de produtividade a médio e longo prazo.&lt;/p&gt;
&lt;p&gt;Para a equipe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenham seus horários de trabalho e sigam a risca, manter uma rotina é muito importante em um regime remoto.&lt;/li&gt;
&lt;li&gt;Se possível não baixem o chat da empresa em seus celulares pessoais.&lt;/li&gt;
&lt;li&gt;Configure para receber notificações apenas nos horários em que você esteja trabalhando.&lt;/li&gt;
&lt;li&gt;Tenha em mente que trabalho é um processo contínuo, você pode continuar amanhã.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Um ano trabalhando remoto]]></title><description><![CDATA[Trabalhar remoto foi uma das melhores decisões que tomei até agora, espero que você possa aprender algo com a minha expêriencia. …Mas isso…]]></description><link>https://dielduarte.github.io/pt-br/um-ano-trabalhando-remoto/</link><guid isPermaLink="false">https://dielduarte.github.io/pt-br/um-ano-trabalhando-remoto/</guid><pubDate>Mon, 20 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Trabalhar remoto foi uma das melhores decisões que tomei até agora, espero que você possa aprender algo com a minha expêriencia.&lt;/p&gt;
&lt;h3 class=&quot;subtitle--separator&quot;&gt;Primeiro de tudo,trabalho remoto não significa qualidade de vida.&lt;/h3&gt;
&lt;p&gt;…Mas isso pode ajudar MUITO! Na minha humilde opinião pessoas que dizem que trabalho remoto é qualidade de vida estão querendo te vender ou te passar uma visão que não é 100% verdadeira. Sua qualidade de vida não aumenta só porque você começou a trabalhar remoto.&lt;/p&gt;
&lt;p&gt;O que ajuda muito na sua qualidade de vida é a flexibilidade que o trabalho remoto te dá.&lt;/p&gt;
&lt;h3&gt;Você não precisa trabalhar todo dia no mesmo horário mais&lt;/h3&gt;
&lt;p&gt;De fato você apende muito sobre você, como por exemplo qual o horário sou mais produtivo trabalhando? Qual o melhor horário para ir correr ou ir na academia? Qual o melhor horário para trabalhar naquela tarefa que precisa 100% do seu foco? E muitas outras perguntas…Agora você aprendeu sobre uma pessoa totalmente nova dentro de você, que você nem sabia que existia. Isso é maravilhoso! Mas tem alguns problemas que vamos conversar sobre o decorrer desse post.&lt;/p&gt;
&lt;h3&gt; Você não precisa perder o seu tempo indo ao escritório&lt;/h3&gt;
&lt;p&gt;Eu passei 5 anos indo da minha cidade para outra cidade para trabalhar/estudar, era apenas 50 minutos de distância. Em 5 anos, eu gastei 3 meses da minha vida apenas indo trabalhar.&lt;/p&gt;
&lt;p&gt;Sério, eu adoraria usar esses 3 meses de férias, estudando, com minha familia/amigos. Qualquer coisa, menos no caminho para o trabalho.&lt;/p&gt;
&lt;p&gt;Também é importante te lembrar que você pode usar esse tempo para fazer algo produtivo, tempo é vida,e essa é uma chance única que nem todo mundo tem acesso. Pense sobre isso!&lt;/p&gt;
&lt;h3&gt;Você pode trabalhar em qualquer lugar&lt;/h3&gt; 
&lt;p&gt;…Se você tiver uma boa conexão de internet!!! Eu aposto que você já viu muitas fotos de pessoas trabalhando remoto na praia. Hmmm… Me desculpe, mas não existe uma boa conexão de internet na praia, pelo menos não no Brasil.&lt;/p&gt;
&lt;p&gt;Mas é verdade, eu literalmente posso trabalhar onde eu quiser. Esse ano eu viajei para os Estados Unidos 2 vezes, Chile uma vez, e agora estou indo para o Canadá. Eu não precisei pedir férias para os meus chefes, eles não se importam qual é o meu timezone, a coisa mais importante é entregar valor,resolver problemas e manter os projetos funcionando! Não importa onde vivo, meu timezone ou quem sou. No meu time temos pessoas do Brasil, Rússia, Índia, Polônia, Estados Unidos e mais…&lt;/p&gt;
&lt;h3&gt;Agora vem a qualidade de vida&lt;/h3&gt; 
&lt;p&gt;Quando você fecha o seu computador depois das 8 horas diárias e pode ser o melhor marido, filho, amigo ou simplesmente pode cuidar das suas coisas como, estudar sem ter que dormir menos de 8 horas por dia pra isso, tocar um instrumento musical dia de semana, viajar quando você quiser.&lt;/p&gt;
&lt;p&gt;Você também precisa cuidar da sua saúde, sério, no começo eu estava apenas comendo fast food e tive sérios problemas de saúde muito rápido. Cuidar da sua saúde, seu corpo e sua mente não tem nada haver com trabalho remoto.&lt;/p&gt;
&lt;p&gt;Você também pode ganhar mais e isso pode ajudar muito. Trabalhando remoto você pode trabalhar para empresas que pagam mais que a média, empresas no Brasil não podem pagar um bom salário comparando com um salário em doláres. Vamos ser honestos, você pode ter uma vida muito melhor se você ganha melhor, isso é conhecido como capitalismo! Eu sinceramente não sei o quão bom capitalismo é, mas é um fato.&lt;/p&gt;
&lt;h1&gt;E quais os problemas?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ficar isolado.&lt;/li&gt;
&lt;li&gt;FOMO.&lt;/li&gt;
&lt;li&gt;Trabalhar mais de 8 horas por dia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todos esses são problemas que você tem que enfrentar ao trabalhar remoto se você não se organizar bem, e eles podem trazer problemas sérios para você.&lt;/p&gt;
&lt;h3&gt;Ficar isolado&lt;/h3&gt;
&lt;p&gt;Quando você começa a trabalhar remoto você vai ficar muito mais tempo na sua casa do que antes, isso vai te forçar a ficar isolado do resto do mundo. É importante que você tenha amigos, saia para almoçar/jantar, conheça novas pessoas indo em meetups, conferências e pratique exercícios físicos. Resumindo, SAIA DE CASA, converse com pessoas, fique mais tempo com sua família e amigos. Não fique isolado do resto do mundo.&lt;/p&gt;
&lt;h3&gt;FOMO ou medo de estar perdendo algo&lt;/h3&gt;
&lt;p&gt;Eu não posso te ajudar muito com isso, porque eu continuo aprendendo como lidar com isso. E isso é um grande problema para muitas pessoas que trabalham remotamente. A melhor coisa a se fazer é dar o seu 100% enquanto você está trabalhando e simplesmente ignorar totalmente quando você está offline. &lt;/p&gt;
&lt;p&gt;Quase 98% das coisas que acontecem no trabalho não são urgentes, eu recomendo muito a leitura do livro &lt;a href=&quot;https://www.amazon.com/Doesnt-Have-Be-Crazy-Work/dp/0062874780/ref=sr_1_1?crid=29HZM51PVO126&amp;#x26;keywords=it+doesn%27t+have+to+be+crazy+at+work&amp;#x26;qid=1579489696&amp;#x26;sprefix=it+doesn%2Caps%2C161&amp;#x26;sr=8-1&quot;&gt;it doesn’t have to be crazy at work&lt;/a&gt; para você entender mais sobre técnicas para manter a sanidade no trabalho, sendo remoto ou não.&lt;/p&gt;
&lt;h3&gt;Trabalhar mais do que 8 horas por dia&lt;/h3&gt;
&lt;p&gt;Pelo menos na minha experiência, isso não acontece todos os dias. Mas conheço muitas pessoas que trabalham muito mais do que 8 horas por dia e é normal, você sente uma pressão que você mesmo coloca porque você não tem mais seu chefe olhando você “trabalhando” e a única forma de provar que você está trabalhando são as suas entregas.&lt;/p&gt;
&lt;p&gt;Mas não fique com medo, trabalhar é um processo contínuo e você pode continuar amanhã!&lt;/p&gt;
&lt;h1&gt;Vale a pena?&lt;/h1&gt;
&lt;p&gt;Como eu disse no começo do texto, trabalhar remoto foi uma das melhores decisões que tomei até hoje na minha carreira. Seja seletivo, procure uma boa empresa com um bom ambiente para se trabalhar remoto e aproveite a sua nova vida!&lt;/p&gt;
&lt;p&gt;Eu espero que você tenha aprendido algo novo hoje! ❤️&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A year working remotely]]></title><description><![CDATA[Working remotely has been one of the best decisions that I have made up to this point. I hope you can learn something from my experience…]]></description><link>https://dielduarte.github.io/en/a-year-working-remotely/</link><guid isPermaLink="false">https://dielduarte.github.io/en/a-year-working-remotely/</guid><pubDate>Mon, 20 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Working remotely has been one of the best decisions that I have made up to this point. I hope you can learn something from my experience.&lt;/p&gt;
&lt;h3 class=&quot;subtitle--separator&quot;&gt;First of all, remote work doesn’t mean better quality of life.&lt;/h3&gt;
&lt;p&gt;…but it can help A LOT! in my humble opinion, people who say that remote work is better quality of life, they just wanna sell something to you that isn’t a hundred percent true. your quality of life doesn’t get better just because you started working remotely.&lt;/p&gt;
&lt;p&gt;what helps the most with your quality of life is the flexibility that remote work brings you &lt;/p&gt;
&lt;h3&gt;You don&apos;t have to work at the same time everyday anymore&lt;/h3&gt;
&lt;p&gt;In fact, you learn so much about yourself, like what time am I more productive? what’s the best time to go outside to run or go to the gym ? what’s the best time to work on a task that needs my entire focus ? and many more questions… now you’ve learned about a new person inside you, that you didn’t know before. THIS IS SICK! but has some trade offs, we are gonna talk more about it later.&lt;/p&gt;
&lt;h3&gt;You don&apos;t have to lose your time going to the office&lt;/h3&gt;
&lt;p&gt;I spent 5 years going from my city to another city to work/study, it was just 50 minutes away. In five years I spent 3 months in commuting time.&lt;/p&gt;
&lt;p&gt;seriously, I would love to use those three months for vacations,studying or spend this time with my family and friends. Anything, but not on my way to work…&lt;/p&gt;
&lt;p&gt;Is also important to remind you to do something productive with this time, time is life, and that’s a unique chance that few people have. think about it!&lt;/p&gt;
&lt;h3&gt;You can work anywhere&lt;/h3&gt; 
&lt;p&gt;…if you have internet!!! I doubt that you have seen pictures of people working at the beach, hmm… I’m sorry, but there’s no good connection at the beach, at least not here in Brazil.&lt;/p&gt;
&lt;p&gt;But yeah, I literally can work anywhere I want to, this year I went to the USA two times, Chile one time, and now I’m going to Canada. I didn’t have to ask my boss for vacation time, they don’t care about my timezone, the important thing about my work is delivering value, solving problems, and keeping it working! doesn’t matter where I’m based, my timezone or who I am. In my team, we have people from Brazil, Russia, India, Poland, the USA and more…&lt;/p&gt;
&lt;h3&gt;Now comes the quality of life&lt;/h3&gt; 
&lt;p&gt;When you close your computer at a reasonable hour and can be the best spouse, child, friend, Or can care about your stuff, like studying without needing to sleep less than 8 hours for it, do your hobbies, like playing a musical instrument during the weekdays, travel anytime you want.&lt;/p&gt;
&lt;p&gt;you also need to care about your health, seriously, at the beginning I was eating just fast foods and I got serious problems really fast. Take care of your health, your body, and your mind. there’s no connection between good health and remote work.&lt;/p&gt;
&lt;p&gt;you can also make more money, and it can help a lot. As a remote worker you can work for companies that pay more than average, companies in Brazil can’t afford a good salary like a salary in dollars, and you can have a better life if you make more money, that’s capitalism! I’m not sure how much good is it, but it’s a fact.&lt;/p&gt;
&lt;h1&gt;How about trade offs?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Isolation&lt;/li&gt;
&lt;li&gt;FOMO &lt;/li&gt;
&lt;li&gt;Working more than 8 hours a day&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;all of these are trade offs of remote work if you don’t organize your day and your life, and they can bring serious problems to you.&lt;/p&gt;
&lt;h3&gt;Isolation&lt;/h3&gt;
&lt;p&gt;When you start working remotely, you will spend more time in your house than before, which will force you to be isolated from the rest of humanity. it’s important to have friends, go out to have dinner/lunch, find new groups like going to meetups, conferences, practice exercises. to sum it up, GO OUT, talk with people, spend more time with your family and friends. Don’t keep yourself isolated from the rest of the world.&lt;/p&gt;
&lt;h3&gt;FOMO&lt;/h3&gt;
&lt;p&gt;I can’t help you a lot with FOMO (fear of missing out), ‘cause I’m still learning how to deal with it. And that’s a huge problem for me, and other remote workers as well. The best stuff to do is give 100% of you when you are working and just ignore it totally when you are off. Again, almost 98% of things that happen aren’t urgent, and I need to highly recommend to you the book &lt;a href=&quot;https://www.amazon.com/Doesnt-Have-Be-Crazy-Work/dp/0062874780/ref=sr_1_1?crid=29HZM51PVO126&amp;#x26;keywords=it+doesn%27t+have+to+be+crazy+at+work&amp;#x26;qid=1579489696&amp;#x26;sprefix=it+doesn%2Caps%2C161&amp;#x26;sr=8-1&quot;&gt;it doesn’t have to be crazy at work&lt;/a&gt; to go deeper on these techniques to keep sanity at work, remotely or not.&lt;/p&gt;
&lt;h3&gt;Working more than 8 hours a day&lt;/h3&gt;
&lt;p&gt;At least in my experience, this doesn’t happen so often. But I know a lot of people who work remotely and work more than 8 hours a day. You feel a pressure that you put on yourself to show people that you are delivering stuff, cause now, you don’t have anyone watching you “working” in an office, the only proof that you are working are the things that you deliver.&lt;/p&gt;
&lt;p&gt;But don’t be afraid, work is a continuous process, you can continue tomorrow!&lt;/p&gt;
&lt;h1&gt;Is it worth it?&lt;/h1&gt;
&lt;p&gt;As I said at the beginning of this text, working remotely has been one of the best decisions that I did until this point. Be selective, find a good company that provides a healthy remote environment and enjoy your new life!&lt;/p&gt;
&lt;p&gt;I hope you’ve learned something new today!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dominando code splitting com webpack]]></title><description><![CDATA[Code Splitting é um processo em build time que quebra parte do seu código em pequenos pedaços que são requisitados de forma assíncrona…]]></description><link>https://dielduarte.github.io/pt-br/dominando-code-splitting-com-webpack/</link><guid isPermaLink="false">https://dielduarte.github.io/pt-br/dominando-code-splitting-com-webpack/</guid><pubDate>Wed, 17 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Code Splitting é um processo em build time que quebra parte do seu código em pequenos pedaços que são requisitados de forma assíncrona, apenas quando necessário. Vamos conversar sobre como Webpack pode ajudar no processo de Code Splitting para atingir a meta de um site mais performático.&lt;/p&gt;
&lt;h2 class=&quot;subtitle--separator&quot;&gt;Mas primeiro, como saber quando eu tenho que quebrar o meu código em pequenos pedaços (chunks)?&lt;/h2&gt;
&lt;p&gt;Os processos mais caros quando falamos sobre renderizar um Website são os processos de download e parsing do Javascript e CSS. Sabendo desse fato, se nós não precisamos de uma parte específica do código no primeiro render, esse código é um ótimo candidato para ser quebrado em uma outra parte e ser baixado sobre demanda. &lt;/p&gt;
&lt;p&gt;O Google Chrome tem uma ótima ferramenta chamada &lt;code class=&quot;language-text&quot;&gt;coverage&lt;/code&gt; que nos mostra qual porcentagem do código baixado está ou não está sendo usado. Isso pode ser usado como uma métrica para seguir e saber o quanto do código baixado poderia ser quebrado em partes assíncronas.&lt;/p&gt;
&lt;p&gt;Para usar essa ferramenta abra o dev tools do Chrome, &lt;code class=&quot;language-text&quot;&gt;cmd/ctrl + p&lt;/code&gt;, e digite &lt;code class=&quot;language-text&quot;&gt;show coverage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/coverage.png&quot; alt=&quot;imagem mostrando como acessar a janela coverage no dev tools do Chrome&quot;&gt; &lt;/p&gt;
&lt;p&gt;Uma vez que abrimos a opção coverage, clique no botão de reload e espere até que nosso site seja completamente carregado. Os resultados vão nos motrar o quanto do código carregado por arquivo está sendo usado. É maravilhoso! 😍&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/result.png&quot; alt=&quot;imagem mostrando a tab coverage, onde nos podemos ver a lista de arquivos baixados e o quanto do código de cada arquivo está sendo usado.&quot;&gt; &lt;/p&gt;
&lt;p&gt;No exemplo abaixo, 46% do código entregue &lt;code class=&quot;language-text&quot;&gt;não&lt;/code&gt; está sendo usado, essa métrica também é relativa, dependende do tamanho do arquivo e de muitas outras variáveis. Então é sempre bom entender o contexto que estamos trabalhando quando estivermos usando essas ferramentas.&lt;/p&gt;
&lt;h2&gt;Code splitting e webpack&lt;/h2&gt;
&lt;p&gt;Com Webpack nos temos duas formas de trabalhar com Code Splitting, imports estáticos e dinâmicos. As duas formas usam &lt;a href=&quot;https://v8.dev/features/dynamic-import&quot;&gt;dynamic imports, uma feature do es2020&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Imports estáticos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;É bom para ser usado quanto estivermos importando bibliotecas/módulos de Javascript pesados.&lt;/li&gt;
&lt;li&gt;Qualquer parte do código que chamamos de temporal, ou seja, coisas que não são vísiveis todo o tempo na sua página, exemplos: tooltips, modais/alertas.&lt;/li&gt;
&lt;li&gt;Rotas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para usar imports estáticos no seu código, é muito simples: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou ainda melhor, criando uma função que importa o módulo quando necessário. O import do arquivo é feito apenas uma vez, depois da primeira é cacheado e na próxima vez que usar a função o módulo é retornado instantaneamente, exemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getModule &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒ &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getModule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Imports Dinamicos&lt;/h3&gt;
&lt;p&gt;Imports dinâmicos não são de verdade dinâmicos, porque eles acontecem em build time. Ao usar imports dinâmicos estamos dizendo para o Webpack: Ei Webpack, por favor, crie todos os chunks possíveis para o caminho que eu estou te passando, seja uma pasta, ou várias em build time. Dessa forma nos conseguimos usar variáveis o que torna esse processo de import “dinâmico”.&lt;/p&gt;
&lt;p&gt;Vamos considerar que nós temos uma pasta de temas, ex:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;themes
  └── dark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js
  └── light&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Como exemplo nós poderiamos importar os temas assim:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getTheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒ &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getTheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dark&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;theme&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dessa forma o Webpack vai criar todos os possíveis chunks em build time para cada tema dentro da pasta &lt;code class=&quot;language-text&quot;&gt;themes&lt;/code&gt;, essa técnica é chamada de &lt;code class=&quot;language-text&quot;&gt;ContextModule&lt;/code&gt; dentro do código do Webpack.&lt;/p&gt;
&lt;h2&gt;Comentários Mágicos&lt;/h2&gt;
&lt;h3&gt;webpackChunkName&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Por default o Webpack cria os nomes dos chunks seguindo uma ordem numérica, 1.js, 2.js, 3.js, o que torna o processo de reconhecer quais arquivos foram importados difícil. Usando &lt;code class=&quot;language-text&quot;&gt;webpackChunkName&lt;/code&gt; nós podemos renomear o chunk, é importante lembrar que para esse comentário mágico funcionar nós devemos estar usando &lt;code class=&quot;language-text&quot;&gt;output.chunkFileName: [name].whateverDoYouWantHere.js&lt;/code&gt; no arquivo de configuração do Webpack.&lt;/p&gt;
&lt;p&gt;Isso é útil apenas no modo de desenvolvimento, então podemos fazer algo do tipo ao importar o arquivo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; vai ser removido se o build estiver sendo rodado em modo de produção, e o &lt;code class=&quot;language-text&quot;&gt;else&lt;/code&gt; se estiver rodando em modo de desenvolvimento. Isso é conhecido como &lt;code class=&quot;language-text&quot;&gt;dead-code elimination&lt;/code&gt; ou em pt-br eliminação do código morto, ferramentas como Uglify.js e outras usam isso para reduzir o tamanho do arquivo final.&lt;/p&gt;
&lt;h3&gt;webpackMode&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackMode: &quot;lazy&quot; */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O comentário mágico &lt;code class=&quot;language-text&quot;&gt;webpackMode&lt;/code&gt; pode receber 4 tipos de valores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lazy: gera um chunk para cada arquivo importado dinamicamente, melhor opção para ser usado em produção.&lt;/li&gt;
&lt;li&gt;lazy-once: gera um chunk apenas que pode satisfazer a condição do import dinâmico, melhor opção para o modo de desenvolvimento reduzindo o tempo de de gerar os arquivos finais do Webpack.&lt;/li&gt;
&lt;li&gt;eager: não gera nenhum chunk extra, todos os módulos são gerados em apenas um arquivo e nenhum request extra é feito.&lt;/li&gt;
&lt;li&gt;weak: útil para universal rendering / ou server side rendering, onde os arquivos são servidos manualmente no primeiro render. O que acontece é que ao requisitar um módulo uma promisse é sempre retornada, mas essa promisse só retorna com sucesso se requisitada pelo client side. Um novo request nunca é feito, pois os arquivos já estão no client pois foram servidos pelo servidor.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prefetch e Preload&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackPrefetch: true */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackLoad: true */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Os dois comentários mágicos, irão criar uma tag link com &lt;code class=&quot;language-text&quot;&gt;rel=prefetch&lt;/code&gt; ou &lt;code class=&quot;language-text&quot;&gt;rel=preload&lt;/code&gt; automaticamente para você fazer o prefetching ou preloading dos seus chunks dependendo da implementação. Se você não sabe o que prefetch e preload links fazem, eu recomendo
a leitura do post &lt;a href=&quot;https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf&quot;&gt;Preload, Prefetch And Priorities in Chrome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Essas foram minhas anotações do curso &lt;a href=&quot;https://frontendmasters.com/courses/performance-webpack/&quot;&gt;Web performance with webpack&lt;/a&gt;. Espero que você tenha aprendido alguma coisa nova hoje, te vejo no próximo post! ❤️&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mastering code splitting with webpack]]></title><description><![CDATA[code splitting is a build time process that splits pieces of your code into async chunks, let’s talk about how Webpack can help us to code…]]></description><link>https://dielduarte.github.io/en/mastering-code-splitting-with-webpack/</link><guid isPermaLink="false">https://dielduarte.github.io/en/mastering-code-splitting-with-webpack/</guid><pubDate>Wed, 17 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;code splitting is a build time process that splits pieces of your code into async chunks, let’s talk about how Webpack can help us to code split and achieve the goal of better website performance.&lt;/p&gt;
&lt;h2 class=&quot;subtitle--separator&quot;&gt;But first, How to know when I have to split my code?&lt;/h2&gt;
&lt;p&gt;The most expensive part of rendering websites is about downloading, and parsing  Javascript and css. That said, if we don’t need to render a specific piece of code on the first render, this code is a good candidate to split and be downloaded by demand, no secrets so far.&lt;/p&gt;
&lt;p&gt;Google Chrome has a nice dev tool called &lt;code class=&quot;language-text&quot;&gt;coverage&lt;/code&gt; that shows what percentage of the code delivered it’s being used. This might be used as a metric to follow and know how much code might be split and downloaded by demand. &lt;/p&gt;
&lt;p&gt;To use the coverage tool just open your dev tools, &lt;code class=&quot;language-text&quot;&gt;cmd/ctrl + p&lt;/code&gt;, and type &lt;code class=&quot;language-text&quot;&gt;show coverage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/coverage.png&quot; alt=&quot;image showing how to access coverage tab on chrome dev tools&quot;&gt; &lt;/p&gt;
&lt;p&gt;then, on the coverage tab click on the reload button and wait until the website is reloaded, this will show you how much code you are using on that specific page per asset downloaded. It’s AMAZING! 😍&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/result.png&quot; alt=&quot;image showing coverage tab, where we can see a list of assets downloaded and how much code is not being used in red.&quot;&gt; &lt;/p&gt;
&lt;p&gt;In the example above, 46% of the code delivered is &lt;code class=&quot;language-text&quot;&gt;not&lt;/code&gt; being used! but that metric is also relative, depends on file size and many other variables, so the context/scenario is super important when using these tools.&lt;/p&gt;
&lt;h2&gt;Code splitting and webpack&lt;/h2&gt;
&lt;p&gt;With webpack we have two ways to work with code splitting, static and “dynamic” imports, both using &lt;a href=&quot;https://v8.dev/features/dynamic-import&quot;&gt;dynamic imports es2020 feature&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Static import&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Good to use when importing heavy javascript libraries/modules&lt;/li&gt;
&lt;li&gt;Anything temporal - things that aren’t visible all the time on your page, tooltip, modal/dialog and even the rest of the page that comes only on scroll could be considered temporal&lt;/li&gt;
&lt;li&gt;Routes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use static imports on your code just do: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, even better, making a function to import the module when necessary, the import of the file itself is made just one time, then is cached and the next time calling the function the module is returned instantly, e.g:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getModule &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒ &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getModule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Dynamic import&lt;/h3&gt;
&lt;p&gt;“Dynamic” imports aren’t really dynamic since they are made at build time. Using dynamic imports it’s like saying to Webpack: Hey Webpack, please do all possibilities of chunks in this specific path at build time. So in this way, we can pass the chunk file that we wanna import using variables which makes this process kinda dynamic.&lt;/p&gt;
&lt;p&gt;Considering we have a folder of themes like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;themes
  └── dark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js
  └── light&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As an example we can do like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getTheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒ &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getTheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dark&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;theme&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way webpack will create chunks for each theme file inside the themes folder, this technique is called &lt;code class=&quot;language-text&quot;&gt;ContextModule&lt;/code&gt; into webpack code. &lt;/p&gt;
&lt;h2&gt;Magic comments&lt;/h2&gt;
&lt;h3&gt;webpackChunkName&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default webpack creates chunk names following a numeral order, 1.js, 2.js, 3.js which makes the process of debugging harder to recognize which file was imported. using &lt;code class=&quot;language-text&quot;&gt;webpackChunkName&lt;/code&gt; we can rename the chunk file, it’s important to remember that for this magic comment work we should be using the config &lt;code class=&quot;language-text&quot;&gt;output.chunkFileName: [name].whateverDoYouWantHere.js&lt;/code&gt; on webpack.config file.&lt;/p&gt;
&lt;p&gt;this is only helpful on dev mode, so we can do like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; part will be removed if the build is running in production mode, and the &lt;code class=&quot;language-text&quot;&gt;else&lt;/code&gt; part if in dev mode. This is known as dead-code elimination, tools like Uglify.js and others do that to reduce bundle size.&lt;/p&gt;
&lt;h3&gt;webpackMode&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackMode: &quot;lazy&quot; */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the magic comment webpackMode has four types of value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lazy: generate chunks for each dynamic imported module, perfect choice to be used in production mode.&lt;/li&gt;
&lt;li&gt;lazy-once: generate a single chunk that can satisfy all calls to import statement, perfect  choice to dev mode reducing the “bundling” time.&lt;/li&gt;
&lt;li&gt;eager: generates no extra chunk, all modules are included in the current chunk and no additional network requests are made. &lt;/li&gt;
&lt;li&gt;weak: this is useful for universal rendering when required chunks are always manually served in initial requests, a Promise is still returned, but only successfully resolves if the chunks are already with the client. If the module is not available, the Promise is rejected. A network request will never be performed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prefetch and Preload&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackPrefetch: true */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackLoad: true */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;both comments above will create a link tag with &lt;code class=&quot;language-text&quot;&gt;rel=prefetch&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;rel=preload&lt;/code&gt; automatically for you, prefetching or preloading your chunks depends on the situation. if you don’t know what prefetch and preload links do, I highly recommend you to read that post &lt;a href=&quot;https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf&quot;&gt;Preload, Prefetch And Priorities in Chrome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This were my notes of &lt;a href=&quot;https://frontendmasters.com/courses/performance-webpack/&quot;&gt;Web performance with webpack&lt;/a&gt; course, I hope you have learned something new today, see you next time! ❤️&lt;/p&gt;</content:encoded></item></channel></rss>