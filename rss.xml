<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Diel Duarte blog]]></title><description><![CDATA[Diel Duarte personal blog]]></description><link>https://dielduarte.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 22 Sep 2019 21:24:13 GMT</lastBuildDate><item><title><![CDATA[Mastering code splitting with webpack]]></title><description><![CDATA[code splitting is a build time process that split pieces of your code into async chunks, let‚Äôs talk about how Webpack can help us to code‚Ä¶]]></description><link>https://dielduarte.github.io/mastering-code-splitting-with-webpack/</link><guid isPermaLink="false">https://dielduarte.github.io/mastering-code-splitting-with-webpack/</guid><pubDate>Wed, 17 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;code splitting is a build time process that split pieces of your code into async chunks, let‚Äôs talk about how Webpack can help us to code splitting and achieve the goal of better website performance.&lt;/p&gt;
&lt;h2 class=&quot;subtitle--separator&quot;&gt;But first, How to know when I have to split my code?&lt;/h2&gt;
&lt;p&gt;The most expensive part of rendering websites is about download, and parse  Javascript and css. That said, if we don‚Äôt need to render a specific piece of code on the first render, this code it‚Äôs a good candidate to be splitted and downloaded by demand, no secrets so far.&lt;/p&gt;
&lt;p&gt;Google Chrome has a nice dev tool called &lt;code class=&quot;language-text&quot;&gt;coverage&lt;/code&gt; that shows what percentage of the code delivered it‚Äôs being used. This might be used as a metric to follow and know how much code might be splitted and downloaded by demand. &lt;/p&gt;
&lt;p&gt;To use coverage tool just open your dev tools, &lt;code class=&quot;language-text&quot;&gt;cmd/ctrl + p&lt;/code&gt;, and type &lt;code class=&quot;language-text&quot;&gt;show coverage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/coverage.png&quot; alt=&quot;image showing how to access coverage tab on chrome dev tools&quot;&gt; &lt;/p&gt;
&lt;p&gt;then, on coverage tab click on the reload button and wait until the website is refreshing, this will show you how much code you are using at that specific page per asset downloaded. It‚Äôs AMAZING! üòç&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/result.png&quot; alt=&quot;image showing coverage tab, where we can see a list of assets downloaded and how much code it&amp;#x27;s not being used in red.&quot;&gt; &lt;/p&gt;
&lt;p&gt;On the example above, 46% of the code delivered it‚Äôs &lt;code class=&quot;language-text&quot;&gt;not&lt;/code&gt; being used! but that‚Äôs metric is also relative, depends on file size e many other variables, so the context/scenario is super important when using these tools.&lt;/p&gt;
&lt;h2&gt;Code splitting and webpack&lt;/h2&gt;
&lt;p&gt;With webpack we have two ways to work with code splitting, static and ‚Äúdynamic‚Äù imports, both using &lt;a href=&quot;https://v8.dev/features/dynamic-import&quot;&gt;dynamic imports es2020 feature&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Static import&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Good to be used when importing heavy javascript libraries/modules&lt;/li&gt;
&lt;li&gt;Anything temporal - things that aren‚Äôt visible all the time on your page, tooltip, modal/dialog and even the rest of the page that comes only on scroll could be considered temporal&lt;/li&gt;
&lt;li&gt;Routes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use static imports on your code just do: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or even better making a function to import the module when necessary, the import of the file itself is made just one time, then is cached and in the next time calling the function the module is returned instantly, e.g:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getModule &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ‚áí &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getModule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Dynamic import&lt;/h3&gt;
&lt;p&gt;‚ÄúDynamic‚Äù imports aren‚Äôt real dynamic since they are made at build time. Using dynamic imports it‚Äôs like saying to Webpack: Hey Webpack, please do all possibilities of chunks in this specific path at build time. So in this way, we can pass the chunk file that we wanna import using variables which turns this process kinda dynamic.&lt;/p&gt;
&lt;p&gt;Considering we have a folder of themes like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;themes
  ‚îî‚îÄ‚îÄ dark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js
  ‚îî‚îÄ‚îÄ light&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As an example we can do like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getTheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ‚áí &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getTheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dark&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;theme&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way webpack will create chunks for each theme file inside themes folder, this technique is called &lt;code class=&quot;language-text&quot;&gt;ContextModule&lt;/code&gt; into webpack code. &lt;/p&gt;
&lt;h2&gt;Magic comments&lt;/h2&gt;
&lt;h3&gt;webpackChunkName&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default webpack creates chunk names following a numeral order, 1.js, 2.js, 3.js which makes debugger harder to know which file was imported. using &lt;code class=&quot;language-text&quot;&gt;webpackChunkName&lt;/code&gt; we can rename the chunk file, it‚Äôs important to remember that for this magic comment works we should be using the config &lt;code class=&quot;language-text&quot;&gt;output.chunkFileName: [name].whateverDoYouWantHere.js&lt;/code&gt; on webpack.config file.&lt;/p&gt;
&lt;p&gt;this is only helpful on dev mode, so we can do like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path/to/myModule.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; part will be removed if the build is running in production mode, and the &lt;code class=&quot;language-text&quot;&gt;else&lt;/code&gt; part if in dev mode. This is known as dead-code elimination, tools like Uglify.js and others do that to reduce bundle size.&lt;/p&gt;
&lt;h3&gt;webpackMode&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackMode: &quot;lazy&quot; */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the magic comment webpackMode has four types of value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lazy: generate chunks for each dynamic imported module, perfect choice to be used in production mode.&lt;/li&gt;
&lt;li&gt;lazy-once: generate a single chunk that can satisfy all calls to import statement, perfect  choice to dev mode reducing the ‚Äúbundling‚Äù time.&lt;/li&gt;
&lt;li&gt;eager: generates no extra chunk, all modules are included in the current chunk and no additional network requests are made. &lt;/li&gt;
&lt;li&gt;weak: this is useful for universal rendering when required chunks are always manually served in initial requests, a Promise is still returned, but only successfully resolves if the chunks are already on the client. If the module is not available, the Promise is rejected. A network request will never be performed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prefetch and Preload&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackPrefetch: true */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackLoad: true */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;path/to/themes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;both comments above will create a link tag with &lt;code class=&quot;language-text&quot;&gt;rel=prefetch&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;rel=preload&lt;/code&gt; automatically for you, to prefetch or preload your chunks depends on the situation. if you don‚Äôt know what prefetch and preload links do, I highly recommend you to to read this post &lt;a href=&quot;https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf&quot;&gt;Preload, Prefetch And Priorities in Chrome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was my notes of &lt;a href=&quot;https://frontendmasters.com/courses/performance-webpack/&quot;&gt;Web performance with webpack&lt;/a&gt; course, I hope you have learned something new today, see you next time! ‚ù§Ô∏è&lt;/p&gt;</content:encoded></item></channel></rss>