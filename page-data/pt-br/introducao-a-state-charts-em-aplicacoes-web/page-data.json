{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt-br/introducao-a-state-charts-em-aplicacoes-web/","result":{"data":{"site":{"siteMetadata":{"title":"Diel Duarte blog","author":"Diel Duarte","siteUrl":"https://dielduarte.dev","pt_br":{"rootPath":"/blog/pt-br","title":"Bem vindo ao meu blog!"},"en":{"rootPath":"/blog/","title":"Welcome to my blog!"}}},"markdownRemark":{"id":"14366be7-cfda-5d15-adb7-9cdef94bfdc2","excerpt":"Era uma vez um Front-end que não conhecia State Charts e tinha uma tarefa muito “simples”, construir um componente de input. O  “simples” input para edição de…","html":"<p>Era uma vez um Front-end que não conhecia State Charts e tinha uma tarefa muito “simples”, construir um componente de input. O  “simples” input para edição de um nome tinha algumas variações de estados:</p>\n<p><code class=\"language-text\">inicial</code>: O input aparece desabilitado, o usuário pode então clicar no ícone de editar. </p>\n<p><code class=\"language-text\">editando</code>: O input está habilitado para receber o novo valor de nome, o usuário pode então clicar no ícone de salvar.</p>\n<p><code class=\"language-text\">salvando</code>: No lugar dos ícones de editar/salvar mostramos um loading sinalizando que alguma ação assíncrona está acontecendo, nesse caso, estamos salvando o novo valor de nome.</p>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/image-1.jpg\" alt=\"imagem mostrando o component de input e seus estados.\"> </p>\n<h2 class=\"subtitle--separator\"></h2>\n<p>Nosso querido Front-end começou a implementação com duas variáveis boleanas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\nisSaving <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>E uma função de <strong><em>onClick</em></strong> que recebia por parametro os valores de <code class=\"language-text\">isEditing</code> e <code class=\"language-text\">isSaving</code>.  Seu pensamento foi: A primeira vez que a função de onClick for chamada, estamos no estado inicial, logo preciso enviar o usuário para o estado de <strong><em>editando</em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isEditing<span class=\"token punctuation\">,</span> isSaving</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEditing <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isSaving<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/image-2.jpg\" alt=\"imagem mostrando o component de input em seu estado inicial e mostrando que o ícone editar possui um evento de on click.\"> </p>\n<p>Ao chegar no estado de edição e sabendo que o usuário poderia novamente clicar no ícone que dessa vez se transformava no ícone para salvar, o mesmo continuou sua implementação adicionando mais um trecho código na função de <strong><em>onClick</em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isEditing<span class=\"token punctuation\">,</span> isSaving</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEditing <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isSaving<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isEditing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    isSaving <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">saveName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       isSaving <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n       isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O trecho de código adicionado primeiro testa se o usuário está no estado de <strong><em>edição</em></strong>, caso verdadeiro, faz o switch das variáveis para levar o usuário para o estado de <strong><em>salvando</em></strong>, e logo em seguida faz um request na api para salvar o novo valor de nome. Ao receber um retorno da api, resetamos as duas variáveis boleanas para false, pois agora, o usuário não está editando e nem salvando um novo valor, o que supostamente levaria o usuário para o estado <strong><em>inicial</em></strong>.</p>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/image-3.png\" alt=\"imagem mostrando o component de input saindo do esado de editando para salvando, e depois de salvando para inicial.\"></p>\n<p>Não muito confiante na solução, deu a task como terminada e seguiu sua vida.</p>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/gif-1.gif\" alt=\"gif de um menino nerd dando joinha.\"></p>\n<h2 class=\"subtitle--separator\"></h2>\n<p>…Era uma vez um designer, que esqueceu de trabalhar no estado de erro do “simples” componente de input.</p>\n<p><strong><em>“Hey dev, Esqueci de um detalhe, não tratamos o estado de erro do input. Quando der erro, volta pro estado de edição por que o cliente pode tentar salvar novamente.”</em></strong></p>\n<p>Mesmo sabendo que a solução atual não era a ideal, continuou com a mesma implementação para adicionar o estado de erro, agora, ao invés de 2 variáveis boleanas, seriam três:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\nisSaving <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\nisError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>Essa pequena adição resultou na função de onClick abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isEditing<span class=\"token punctuation\">,</span> isSaving<span class=\"token punctuation\">,</span> isError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEditing <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isSaving<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isEditing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    isSaving <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    isError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">saveName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       isSaving <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n       isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       isError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n       isSaving <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n       isEditing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Task concluida novamente.\nDesconfortável com a solução final, foi pesquisar. Afinal, qual o problema com variáveis boleanas? </p>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/image-4.png\" alt=\"imagem mostrando que podemos ter 8 variações usando 3 variáveis booleanas.\"></p>\n<p>O problema é que como na imagem acima, apesar de parecer inofensiva e óbvio, 1 variável boleana representa duas variações. O porém que ninguém lembra é que adicionando mais de uma variável, suas variações crescem exponencialmente. Com três variáveis boleanas como no exemplo acima, temos 8 variações.</p>\n<p>E aí, você acha que o código acima está preparado para lidar com 8 variações? A resposta infelizmente é: não. Seu código pode parecer simples e estar 99% vunerável a bugs.</p>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/image-5.jpg\" alt=\"meme de um homem tampando a placa do carro pela metada na primeira parte da foto, e na segunda parte tampando a outra.\"></p>\n<p>Sabendo disso, podemos fazer diferente, podemos mapear todos os estados em uma constante:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stateType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'IDLE'</span><span class=\"token operator\">:</span> <span class=\"token string\">'IDLE'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'EDITING'</span><span class=\"token operator\">:</span> <span class=\"token string\">'EDITING'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'SAVING'</span><span class=\"token operator\">:</span> <span class=\"token string\">'SAVING'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'ERROR'</span><span class=\"token operator\">:</span> <span class=\"token string\">'ERROR'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Podemos também criar um objeto que nos diga qual o estado atual e qual o próximo estado, exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">const</span> nextState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">[</span>stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">IDLE</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">EDITING</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">[</span>stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">EDITING</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">SAVING</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">[</span>stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">SAVING</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     success<span class=\"token operator\">:</span> stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">IDLE</span><span class=\"token punctuation\">,</span>\n     error<span class=\"token operator\">:</span> stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">[</span>stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">SAVING</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Limitaremos então o estado do input para apenas UM estado por vez:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">inputState <span class=\"token operator\">=</span> stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">IDLE</span></code></pre></div>\n<p>E nossa função de onClick receberia apenas o nosso estado atual por parâmetro, e usando o objecto nextState, saberiamos qual o próximo estado deveríamos mover nosso componente. Exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentInputState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentInputState <span class=\"token operator\">===</span> stateType<span class=\"token punctuation\">.</span><span class=\"token constant\">EDITING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">saveName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> currentInputState <span class=\"token operator\">===</span> nextState<span class=\"token punctuation\">[</span>stateType<span class=\"token punctuation\">.</span>saving<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> currentInputState <span class=\"token operator\">===</span> nextState<span class=\"token punctuation\">[</span>stateType<span class=\"token punctuation\">.</span>saving<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t  currentInputState <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">[</span>currentInputState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos resumir nossa história em problema e solução:</p>\n<p><code class=\"language-text\">Problema:</code></p>\n<p>Manter o estado usando variáveis condicionais ficou confuso, além de obrigar a tratar todos os edge cases e rezar para que o estado não caísse em possíveis combinações que não foram tratadas.</p>\n<p><code class=\"language-text\">Solução:</code></p>\n<p>Ter um único estado por vez e definir as transições entre estados através de um evento.</p>\n<h2 class=\"subtitle--separator\"></h2>\n<p>Nossa solução tem um nome: <code class=\"language-text\">Finite State Machines</code>, mas a final oq é Finite State Machines? </p>\n<blockquote>\n<p>Uma Máquina de estados finita (Finite State Machines ou FSM) é um modelo matemático usado para representar programas de computadores ou circuitos lógicos. O conceito é concebido como uma máquina abstrata que deve estar em <strong>UM</strong> de um número finito de estados.</p>\n</blockquote>\n<p>source: <a href=\"https://pt.wikipedia.org/wiki/M%C3%A1quina_de_estados_finita\">https://pt.wikipedia.org/wiki/Máquina<em>de</em>estados_finita</a></p>\n<p>Uma forma bem simples de representar FSM é usando um diagrama de transição de estados, onde o conseguimos vizualizar todo o fluxo de transição de estados por exemplo:</p>\n<p><strong><em>começando em um estado A ⇒ um vento X aconteceu ⇒ vamos para um estado B</em></strong></p>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/image-6.png\" alt=\"imagem mostrando um diagrama de transição de estados\"></p>\n<h3>Finite State Machines? State charts? que confusão!</h3>\n<p>Quando começamos a estudar mais sobre Finete State Machines vamos sempre nos deparar com um outro nome que é <code class=\"language-text\">State Charts</code>, mas a propósito qual a grande diferença entre eles? </p>\n<p>Como qualquer solução, Finite State Machines por sí só tem alguns problemas, geralmente acabam com um grande número de estados, muitos deles com transições idênticas, tornando muito verboso e de difícil manutenção. Este é o famoso problema conhecido como explosão de estados.</p>\n<p>State Charts por sua vez, apareceu pouco tempo depois adicionando soluções para que FSM fossem mais escalável a medida que o seu sistema fosse crescendo e ficando mais complexo. Além de novas ideias para tornar sua vida mais fácil.</p>\n<p><img src=\"/blog/images/web-development-with-state-charts-intro/image-7.png\" alt=\"imagem mostrando alguns dos conceitos que state charts contém, como activity, actions, paralel states entre outros...\"></p>\n<p>Vale lembrar que a ideia foi apresentada há mais de 20 anos atrás, além de ser uma das bases da computação, é usada largamente em hardware embarcados e games! Com o aparecimento da lib Xstate que vamos descobrir no próximo post, o uso na web e pricipalmente usando Javascript está crescendo cada vez mais. Apenas para deixar um gostinho do que vamos ver no próximo artigo e também sobre uma das maiores vantagens de se usar State Charts que é o poder de vizualizar seu código, dá uma olhada como ficaria nosso codigo do componente de input usando Xstate:</p>\n<p><a href=\"https://xstate.js.org/viz/?gist=d73e129d583ac4a0ba956736e68dbdd2\">https://xstate.js.org/viz/?gist=d73e129d583ac4a0ba956736e68dbdd2</a></p>\n<p>Não se preocupe se não entendeu o código, vamos aprender tudo sobre o uso de Xstate e State Charts em uma aplicação real no próximo artigo!</p>\n<h3>Estado? É tipo redux?</h3>\n<p>Quando trabalhamos com State Charts, os famosos estados não são os estados dinâmicos ou relacionados a dados de uma aplicação e sim em qual cenário de uma possibilidade finita e pré estabelecida uma aplicação está, lembre-se da regra de ouro, uma aplicação pode estar em UM único estado por vez. Exemplo:</p>\n<p>Sua aplicação pode estar no estado de loading e ter um contexto <code class=\"language-text\">user=null</code>, em uma próximo momento sua aplicação estaria em um estado de logado e ter um contexto <code class=\"language-text\">user={ id: 1, name:  &#39;Diel&#39; }</code>. Com esse exemplo fica fácil assimilar que o estado como estamos acostumados no Redux ou outras opções são chamados de contexto no mundo dos statecharts.</p>\n<p>Te vejo no próximo post, onde vamos aprender a como modelar uma aplicação utilizando State Charts e Xstate.</p>","fields":{"slug":"/pt-br/introducao-a-state-charts-em-aplicacoes-web/"},"frontmatter":{"title":"Introdução a state charts em aplicações web","date":"November 01, 2020","description":"Era uma vez um Front-end que não conhecia State Chartse e tinha uma tarefa muito \"simples\"...","languageKey":"pt_br","languageLink":"en/web-development-with-state-charts-intro"}}},"pageContext":{"slug":"/pt-br/introducao-a-state-charts-em-aplicacoes-web/","previous":{"fields":{"slug":"/en/web-development-with-state-charts-intro/"},"frontmatter":{"title":"Web development with state charts intro"}},"next":null}},"staticQueryHashes":["63159454"]}