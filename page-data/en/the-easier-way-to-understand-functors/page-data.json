{"componentChunkName":"component---src-templates-blog-post-js","path":"/en/the-easier-way-to-understand-functors/","webpackCompilationHash":"43b12c4933495268691d","result":{"data":{"site":{"siteMetadata":{"title":"Diel Duarte blog","author":"Diel Duarte","siteUrl":"https://dielduarte.github.io","pt_br":{"rootPath":"/blog/pt-br","title":"Bem vindo ao meu blog!"},"en":{"rootPath":"/blog/","title":"Welcome to my blog!"}}},"markdownRemark":{"id":"a3f156e0-7115-5015-abf2-705cfd2e1c85","excerpt":"I really like functional programming, and I’ve been studying some functional languages during the last years like Elm and now Reason just for fun, never did…","html":"<p>I really like functional programming, and I’ve been studying some functional languages during the last years like Elm and now Reason just for fun, never did something serious like a production app in a company with these languages yet but I really like to bring some concepts of these languages to javascript. But somehow I always ended up frustrated with some functional techniques explanations,</p>\n<p>like functors.</p>\n<h2 class=\"subtitle--separator\">What are functors in fact?</h2>\n<p>the easier way to understand functors in my humble opinion is the concept of: </p>\n<ul>\n<li>Functors are functions that return the value passed in a way that this value can be mapped over and over again till you get the result expected. it will help you to visualize the flow of the value transformation instead of creating multiple variables in memory in an imperative way, think like the <code class=\"language-text\">promise.then</code> method that can be chained step by step.</li>\n</ul>\n<p><code class=\"language-text\">talk is cheap, show me the code.</code></p>\n<p>considering we have a function like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertMoneyToNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">money</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> moneyWithoutMask <span class=\"token operator\">=</span> money<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>moneyWithoutMask<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>let’s create a functor helper first, this function accepts any value and makes it mappable like arrays, so now we can chain .map transforming any value on the value desired</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">functor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">anyValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">map</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> <span class=\"token function\">functor</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>anyValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> anyValue\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>as we can see, the functor helper receives <code class=\"language-text\">any value</code> and returns an object with:</p>\n<ul>\n<li>A method called <code class=\"language-text\">map</code> that receives a function and returns a functor of this function execution value, making the new value mappable again.</li>\n<li>A field called <code class=\"language-text\">value</code> that contains the final result of the last function execution, searching you can find variants of this idea like a flatMap method that just returns the last function execution without wrapping it in a functor, then in the last execution instead of using <code class=\"language-text\">.map().value</code> you can just use <code class=\"language-text\">.flatMap(anyValue)</code>.</li>\n</ul>\n<p>now with this helper, we can convert the convertMoneyToNumber to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertMoneyToNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">money</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">functor</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">money</span> <span class=\"token operator\">=></span> money<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>parseFloat<span class=\"token punctuation\">)</span> <span class=\"token comment\">//same as .map(money => parseFloat(money))</span>\n    <span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can map any type of value transforming its original value in a new value, not only arrays! Just to be clear this is just the base of the functors idea, there are many more variants.</p>\n<p>I hope you have learned something new today! </p>","fields":{"slug":"/en/the-easier-way-to-understand-functors/"},"frontmatter":{"title":"The easier way to understand functors","date":"July 14, 2020","description":"the easier way to understand functors in my humble opinion is the concept of...","languageKey":"en","languageLink":"pt-br/o-jeito-mais-simples-de-entender-functors"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/en/the-easier-way-to-understand-functors/","previous":{"fields":{"slug":"/en/tips-for-remote-teams/"},"frontmatter":{"title":"Tips for remote teams"}},"next":{"fields":{"slug":"/pt-br/o-jeito-mais-simples-de-entender-functors/"},"frontmatter":{"title":"O jeito mais fácil de entender functors"}}}}}